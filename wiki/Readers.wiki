#summary How to set up a DKPro-TC reader

=Creating a reader for your data=

For reference, you should have a look at the readers of the `io` package in the `de.tudarmstadt.ukp.dkpro.tc.examples-gpl` module.

==Minimal requirements==

All DKPro-TC readers should implement either `TCReaderSingleLabel` (single-label classification and regression experiments) or `TCReaderMultiLabel` (multi-label classification experiments).

A reader in DKPro-TC needs to define at least:
  * the structure of the UIMA CAS (i.e. the document text)
  * the classification outcome (i.e. the class labels of the document)

==Reusing of readers==
You can re-use most readers from the `io` modules of [http://code.google.com/p/dkpro-core-asl DKPro Core], which contain readers for different simple data formats such as TXT or HTML, but also readers for popular data collections, e.g. the BNC.
If your DKPro-TC reader inherits from a DKPro Core reader, you don't have to care about the structure of the CAS, but only need to additionally specify the `getTextClassificationOutcome()`. The latter sets the document labels.

==Setup==
At first we come to the setup and then describe how to build a simple suitable reader.
There are given two TXT files: the first consists of instances and the second of matching labels. Here is an excerpt from there:
{{{
This is the first sentence.  ----  sentence_found
It is the second one.	     ----  sentence_missing
The third sentence.          ----  sentence_found
}}}
The label sentence_found means that sentence is containing the word "sentence", the label sentence_missing means the opposite of that: the sentence does not contain the word "sentence". The appropriate files are located at `de.tudarmstadt.ukp.dkpro.tc.examples-gpl/src/main/resources/data/simple_reader`.

==Example reader==
In this section is described a simple customized reader which can be used as a basis for an own customized reader.
The reader is named `SimpleDkproTCReader` and can be found at `de.tudarmstadt.ukp.dkpro.tc.examples.io`. It inherits from `JCasResourceCollectionReader_ImplBase` and implements `TCReaderSingleLabel` (as described in the first section). In most cases to build a reader the following functions must be overwritten:

{{{	
// read and save in some matching data type instances from the TXT file and also matching labels
initialize(UimaContext context)
}}}

{{{
// look if there is a next element so that it can be itterated one step further 
// (in this case if there is a next instance)
hasNext()
}}}

{{{
// set metadata (as we are creating more than one CAS out of a single file, we need to have different document 
// titles and URIs for each CAS, otherwise serialized CASes will be overwritten), 
// set document text (instance text in this case) and outcomes (matching labels)
getNext(JCas aJCas)
}}}

{{{
//return classification outcome (in this case it is the responding matching label)
getTextClassificationOutcome(JCas jcas) 
}}}

The corresponding demo can be started with `SimpleDkproTCReaderDemo` from the package `de.tudarmstadt.ukp.dkpro.tc.examples.single.document`.